#!/usr/bin/env bash
set -euo pipefail

SCRIPT_DIR=$(dirname "$0")

function git_sync() {
  set -euo pipefail
  local remote
  local current_branch
  local parent_branch
  local parent_branch_upstream

  remote=$(git remote)
  if [ -z "$remote" ]; then
    print "No remote found"
    exit 1
  fi

  current_branch=$(git rev-parse --abbrev-ref HEAD)

  # support passing in the parent branch as an argument
  parent_branch=${1-""}
  # if no parent branch is passed in, try to determine it
  if [ -z "$parent_branch" ]; then
    parent_branch=$("$SCRIPT_DIR/git_parent" || echo)
  fi
  # if current branch does not have a parent, use the remote's default branch
  if [ -z "$parent_branch" ]; then
    parent_branch=$(basename "$(git symbolic-ref refs/remotes/"$remote"/HEAD)")
  fi
  # if we still don't have a parent branch, exit
  if [ -z "$parent_branch" ]; then
    print "Could not determine parent branch"
    exit 1
  fi

  parent_branch_upstream="$remote/$parent_branch"

  print "Updating $parent_branch from $parent_branch_upstream"
  git fetch "$remote" "$parent_branch:$parent_branch"
  print "Rebasing $parent_branch_upstream onto $current_branch"
  confirm_continue
  git rebase "$parent_branch_upstream"
  print "Force pushing $current_branch"
  confirm_continue
  git push --force-with-lease
}

print() {
  echo "$1" >&2
}

confirm_continue() {
  read -p "Continue? (y/n) " -n 1 -r >&2
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    print "Aborted"
    return 1
  fi
}

git_sync "$@"
